%% ------------------ Data Extraction and Preprocessing ------------------
% Ensure that your "out" variable is loaded (e.g., load('myDataFile.mat');)

% Extract time vector and compute number of samples.
timeVec = out.Sensor_Time.time;   % [N x 1]
N = length(timeVec);

% --- Extract Gyro Data (assume 1x3xN; rearranged to [N x 3]) ---
gyroData = permute(out.Sensor_GYRO.signals.values, [3, 2, 1]);  % [N x 3]
% Use the z-axis (assumed third column) as angular velocity.
omega_z = gyroData(:,3);  % [rad/s]

% --- Extract Accelerometer and Magnetometer Data ---
accelData = permute(out.Sensor_ACCEL.signals.values, [3, 2, 1]);  % [N x 3]
magData   = permute(out.Sensor_MAG.signals.values, [3, 2, 1]);      % [N x 3]

% --- Smoothing (using moving average for simplicity) ---
windowSize = 100;
accelData_smooth = movmean(accelData, windowSize);
magData_smooth   = movmean(magData, windowSize);

% --- Remove Biases (using your calibration constants) ---
accelBias = [10.0026, 0.0277, -0.3965];  % in m/s^2
magBias   = [0, 0, 0.0001];              % in uT

accelData_corr = accelData_smooth - repmat(accelBias, N, 1);
magData_corr   = magData_smooth - repmat(magBias, N, 1);

%% ------------------ Compute Compass Yaw (ψₘ) ------------------
% For each time sample, compute roll & pitch from the accelerometer,
% then tilt-compensate the magnetometer to obtain a yaw measurement.

yaw_m = zeros(N,1);
for i = 1:N
    a = accelData_corr(i,:);  % [ax, ay, az]
    m = magData_corr(i,:);    % [mx, my, mz]
    
    % Compute roll and pitch from accelerometer.
    % Assuming sensor axes: x = lateral, y = forward, z = upward.
    % For a level sensor, a ≈ [0, 0, -g].
    roll_i  = atan2(-a(2), -a(3));
    pitch_i = atan2(a(1), sqrt(a(2)^2 + a(3)^2));
    
    % Tilt-compensate the magnetometer:
    mag_x_comp = m(1)*cos(pitch_i) - m(3)*sin(pitch_i);
    mag_y_comp = m(1)*sin(roll_i)*sin(pitch_i) + m(2)*cos(roll_i) + m(3)*sin(roll_i)*cos(pitch_i);
    
    yaw_m(i) = atan2(mag_y_comp, mag_x_comp);
end
yaw_m = wrapToPi(yaw_m);

%% ------------------ Gyro Integration to Obtain ψ_g ------------------
% Set the initial gyro yaw equal to the initial compass yaw:
psi_g = zeros(N,1);
psi_g(1) = yaw_m(1);

for k = 1:N-1
    dt = timeVec(k+1) - timeVec(k);
    psi_g(k+1) = psi_g(k) + omega_z(k)*dt;
end
psi_g = wrapToPi(psi_g);

%% ------------------ Kalman Filter for Gyro Error Estimation ------------------
% Our goal is to estimate the gyro yaw error δψ so that the true yaw is:
%   ψ_true = ψ_g - δψ.
%
% We assume a state vector:
%   x = [δψ; δk; b]
% where δψ is the accumulated gyro yaw error, δk is a scale factor error,
% and b is a bias error. The continuous-time model is:
%
%   d/dt δψ = ω * δk + b + u_ψ,
%   d/dt δk = u_k,
%   d/dt b  = u_b.
%
% In discrete time, with a time step dt and approximating integration with Euler’s method,
% we use the state transition:
%
%   x(k+1) = F_k * x(k) + w(k)
%
% where
%   F_k = [1, ω_z(k)*dt, dt;
%          0,      1,    0;
%          0,      0,    1].
%
% The measurement is:
%   z(k) = ψ_g(k) - ψ_m(k) = δψ + v,
% so the measurement matrix is H = [1, 0, 0].

% Initialization:
x_est = zeros(3,1);  % initial state: assume zero error.
P_est = eye(3) * 0.001;  % small initial covariance.

% Process noise standard deviations (tune these experimentally)
sigma_psi = 0.001;
sigma_k   = 0.0001;
sigma_b   = 0.0001;
% Process noise covariance (discrete): Q_k = diag([sigma_psi^2, sigma_k^2, sigma_b^2])*dt.
% We'll update Q_k at each time step.
R_k = (0.05)^2;  % Measurement noise variance for yaw measurement (assumed)

% Preallocate storage for the state estimates and corrected yaw.
x_est_hist = zeros(3, N);
x_est_hist(:,1) = x_est;
psi_est = zeros(N,1);
psi_est(1) = wrapToPi( psi_g(1) - x_est(1) );  % Corrected yaw = gyro yaw - δψ.

% Kalman filter loop:
for k = 1:N-1
    dt = timeVec(k+1) - timeVec(k);
    
    % State transition matrix F_k:
    F = [1, omega_z(k)*dt, dt;
         0, 1, 0;
         0, 0, 1];
    
    % Process noise covariance Q_k:
    Q_k = diag([sigma_psi^2, sigma_k^2, sigma_b^2]) * dt;
    
    % Prediction step:
    x_pred = F * x_est;
    P_pred = F * P_est * F' + Q_k;
    
    % Measurement: difference between gyro-integrated yaw and sensor-based yaw.
    z_meas = psi_g(k+1) - yaw_m(k+1);
    
    % Measurement model: H = [1, 0, 0].
    H = [1, 0, 0];
    
    % Innovation and its covariance:
    y_innov = z_meas - H * x_pred;
    S = H * P_pred * H' + R_k;
    
    % Kalman gain:
    K = P_pred * H' / S;
    
    % Update:
    x_est = x_pred + K * y_innov;
    P_est = (eye(3) - K * H) * P_pred;
    
    % Save state and compute corrected yaw:
    x_est_hist(:, k+1) = x_est;
    psi_est(k+1) = wrapToPi( psi_g(k+1) - x_est(1) );
end

%% ------------------ Post Processing ------------------
figure;
plot(timeVec, yaw_m, 'b-', 'LineWidth', 1.5); hold on;
plot(timeVec, psi_g, 'k--', 'LineWidth', 1.5);
plot(timeVec, psi_est, 'r-', 'LineWidth', 1.5);
xlabel('Time [s]');
ylabel('Yaw [rad]');
legend('Compass Yaw ψ_m','Gyro-integrated Yaw ψ_g','Kalman Corrected Yaw ψ_{est}');
title('Yaw Estimation Using Gyro Integration and Kalman Filter');
grid on;
%% Compute Ground Truth Yaw from Quaternion Data
% Extract quaternion data from ground truth (assumed to be [N x 4] with order [w, x, y, z])
quat_GT = out.GT_rotation.signals.values;  % [N x 4]
q_GT = quaternion(quat_GT(:,1), quat_GT(:,2), quat_GT(:,3), quat_GT(:,4));
q_GT = normalize(q_GT);
eul_GT = quat2eul(q_GT, 'ZYX');  % Euler angles in [yaw, pitch, roll] order
yaw_GT = wrapToPi(eul_GT(:,1));   % extract yaw and wrap to [-pi,pi]

%% Compute RMSE between Estimated Yaw and Ground Truth Yaw
% Ensure psi_est (Kalman-corrected yaw) is wrapped to [-pi, pi]
psi_est = wrapToPi(psi_est);

% Use the minimum length if necessary
N_rmse = min(length(psi_est), length(yaw_GT));

% Compute the error (taking care of angle wrapping)
yaw_error = wrapToPi(psi_est(1:N_rmse) - yaw_GT(1:N_rmse));

% RMSE calculation
rmse_yaw = sqrt(mean(yaw_error.^2));
fprintf('Yaw RMSE: %.4f rad (%.4f deg)\n', rmse_yaw, rad2deg(rmse_yaw));

% Plot Ground Truth Yaw vs. Kalman Corrected Yaw
figure;
plot(timeVec(1:N_rmse), yaw_GT(1:N_rmse), 'b-', 'LineWidth', 1.5); hold on;
plot(timeVec(1:N_rmse), psi_est(1:N_rmse), 'r--', 'LineWidth', 1.5);
xlabel('Time [s]');
ylabel('Yaw [rad]');
title('Ground Truth Yaw vs. Kalman Corrected Yaw');
legend('Ground Truth Yaw','Kalman Corrected Yaw');
grid on;


%% Calculate Ground Truth Yaw from Quaternion Data
% Extract quaternion data (assumed order: [w, x, y, z])
quat_GT = out.GT_rotation.signals.values;  % [N x 4]
q_GT = quaternion(quat_GT(:,1), quat_GT(:,2), quat_GT(:,3), quat_GT(:,4));
q_GT = normalize(q_GT);
eul_GT = quat2eul(q_GT, 'ZYX');   % Euler angles in [yaw, pitch, roll] order
yaw_GT = wrapToPi(eul_GT(:,1));    % Ground truth yaw wrapped to [-pi, pi]

%Calculate RMSE between Gyro-Integrated Yaw and Ground Truth Yaw
% Assume psi_g is the raw gyro-integrated yaw computed previously.
% (For example, computed as:
%   psi_g(1) = yaw_m(1);
%   for k = 1:N-1, psi_g(k+1) = psi_g(k) + omega_z(k)*dt; end,
%   psi_g = wrapToPi(psi_g);
% )

% Make sure psi_g and yaw_GT have the same length:
N_rmse = min(length(psi_g), length(yaw_GT));

% Compute the error while properly handling angle wrapping:
yaw_error = wrapToPi( psi_g(1:N_rmse) - yaw_GT(1:N_rmse) );

% RMSE calculation:
rmse_gyro = sqrt(mean(yaw_error.^2));
fprintf('RMSE between Gyro Estimated Yaw and Ground Truth Yaw: %.4f rad (%.4f deg)\n', ...
    rmse_gyro, rad2deg(rmse_gyro));

%% Plot for Visual Comparison
figure;
plot(timeVec(1:N_rmse), yaw_GT(1:N_rmse), 'b-', 'LineWidth', 1.5); hold on;
plot(timeVec(1:N_rmse), psi_g(1:N_rmse), 'r--', 'LineWidth', 1.5);
xlabel('Time [s]');
ylabel('Yaw [rad]');
title('Gyro-Integrated Yaw vs. Ground Truth Yaw');
legend('Ground Truth Yaw','Gyro-Integrated Yaw');
grid on;
