% Extract ground truth position
GT = out.GT_position.signals.values;
x_gt = GT(:,1);         
y_gt = GT(:,2);         

figure;
plot(x_gt, y_gt, 'k-', 'LineWidth', 1.5);
xlabel('X [m]');
ylabel('Y [m]');
title('Ground Truth Trajectory');
grid on;
axis equal;


[~,~,psi_all] = ekfBlock(out);


quat_GT = out.GT_rotation.signals.values;
q = quaternion(quat_GT(:,1), quat_GT(:,2), quat_GT(:,3), quat_GT(:,4));
q = normalize(q);  
eul = quat2eul(q, 'ZYX');
yaw_gt = eul(:,1);


N = min(length(psi_all), length(yaw_gt));
yaw_est = wrapToPi(psi_all(1:N));
yaw_gt = wrapToPi(yaw_gt(1:N));


valid_idx = ~isnan(yaw_est) & ~isnan(yaw_gt);
yaw_error = wrapToPi(yaw_est(valid_idx) - yaw_gt(valid_idx));


yaw_rmse = sqrt(mean(yaw_error.^2));
fprintf('Yaw RMSE: %.6f ', yaw_rmse);


function [phi_all, theta_all, psi_all] = ekfBlock(out)
acc = permute(out.Sensor_ACCEL.signals.values, [3 2 1]);
gyro = permute(out.Sensor_GYRO.signals.values, [3 2 1]);
magn = permute(out.Sensor_MAG.signals.values, [3 2 1]);
time = out.Sensor_Time.time;
N = size(acc, 1);

phi_all = zeros(N, 1);
theta_all = zeros(N, 1);
psi_all = zeros(N, 1);

acc_std = std(acc);
gyro_std = std(gyro);
magn_std = std(magn);

acc_bias = mean(acc);
gyro_bias = mean(gyro);
magn_bias = mean(magn);

x = zeros(3,1);
P = eye(3)*0.1;
P(3,3) = (180/pi)^2;

dt = mean(diff(time));
g = 9.81;
M_inertial = [19437.4e-9; 181.2E-9; 45090.4E-9];
Q = diag(gyro_std);
R = diag([acc_std magn_std]);

for k = 1:N
    accX = acc(k,1) - acc_bias(1);
    accY = acc(k,2) - acc_bias(2);
    accZ = acc(k,3) - acc_bias(3);

    gyroX = gyro(k,1) - gyro_bias(1);
    gyroY = gyro(k,2) - gyro_bias(2);
    gyroZ = gyro(k,3) - gyro_bias(3);

    magX = magn(k,1) - magn_bias(1);
    magY = magn(k,2) - magn_bias(2);
    magZ = magn(k,3) - magn_bias(3);

    phi_k = x(1);
    theta_k = x(2);
    psi_k = x(3);

    p = gyroX;
    q = gyroY;
    r = gyroZ;

    phi_dot = p + q*sin(phi_k)*tan(theta_k) + r*cos(phi_k)*tan(theta_k);
    theta_dot = q*cos(phi_k) - r*sin(phi_k);
    psi_dot = (q*sin(phi_k) + r*cos(phi_k)) / cos(theta_k);

    x_pred = x + dt * [phi_dot; theta_dot; psi_dot];

    F_ct = zeros(3);
    F_ct(1,1) = q*cos(phi_k)*tan(theta_k) - r*sin(phi_k)*tan(theta_k);
    sec2_th = 1/cos(theta_k)^2;
    F_ct(1,2) = (q*sin(phi_k) + r*cos(phi_k)) * sec2_th;
    F_ct(2,1) = -q*sin(phi_k) - r*cos(phi_k);
    one_over_costh = 1 / cos(theta_k);
    F_ct(3,1) = one_over_costh * (q*cos(phi_k) - r*sin(phi_k));
    F_ct(3,2) = (q*sin(phi_k) + r*cos(phi_k)) * (sin(theta_k)/(cos(theta_k)^2));

    F = eye(3) + dt * F_ct;
    P_pred = F * P * F' + Q;

    g_inertial = [0; 0; g];
    phi_p = x_pred(1);
    theta_p = x_pred(2);
    psi_p = x_pred(3);
    Rib = rotX(phi_p)*rotY(theta_p)*rotZ(psi_p);

    acc_pred = Rib * g_inertial;
    mag_pred = Rib * M_inertial;

    z = [accX; accY; accZ; magX; magY; magZ];
    z_pred = [acc_pred; mag_pred];

    H = zeros(6,3);
    eps = 1e-6;
    for i = 1:3
        x_shift = x_pred;
        x_shift(i) = x_shift(i) + eps;
        R_shift = rotX(x_shift(1))*rotY(x_shift(2))*rotZ(x_shift(3));
        z_shift = [R_shift*g_inertial; R_shift*M_inertial];
        H(:,i) = (z_shift - z_pred)/eps;
    end

    y = z - z_pred;
    S = H * P_pred * H' + R;
    K = P_pred * H' / S;

    x = x_pred + K*y;
    P = (eye(3) - K*H) * P_pred;

    phi_all(k) = x(1);
    theta_all(k) = x(2);
    psi_all(k) = x(3);
end
end
function Rx = rotX(a)
 ca = cos(a); sa = sin(a);
 Rx = [1 0 0;
 0 ca -sa;
 0 sa ca];
end
function Ry = rotY(b)
 cb = cos(b); sb = sin(b);
 Ry = [ cb 0 sb;
 0 1 0;
 -sb 0 cb];
end
function Rz = rotZ(c)
 cc = cos(c); sc = sin(c);
 Rz = [ cc -sc 0;
 sc cc 0;
 0 0 1];
end
