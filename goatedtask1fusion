[X_Est, P_Est, GT] = myEKF(out);

error = GT(:,1:2) - X_Est(:,1:2);
rmse = sqrt(mean(sum(error.^2,2)));
fprintf('RMSE (XY) = %.4f m\n', rmse);

% Compute yaw RMSE
yaw_error = wrapToPi(X_Est(:,3) - GT(:,3)); % Ensure errors are within [-pi, pi]
yaw_rmse = sqrt(mean(yaw_error.^2));
fprintf('Yaw RMSE = %.6f rad (%.4f degrees)\n', yaw_rmse, rad2deg(yaw_rmse));

figure;
plot(GT(:,1), GT(:,2), 'k-', 'LineWidth', 1.5);  % Ground truth (black solid line)
hold on;
plot(X_Est(:,1), X_Est(:,2), 'r--', 'LineWidth', 1.5);  % Estimated trajectory (red dashed line)
xlabel('X Position [m]');
ylabel('Y Position [m]');
title('2D Trajectory: Ground Truth vs. EKF Estimate');
legend('Ground Truth','EKF Estimate');
grid on;
axis equal;

figure;
plot(GT(:,3), 'k-', 'LineWidth', 1.5); % Ground truth yaw
hold on;
plot(X_Est(:,3), 'r--', 'LineWidth', 1.5); % Estimated yaw
xlabel('Time Step');
ylabel('Yaw [rad]');
title('Yaw: Ground Truth vs. EKF Estimate');
legend('Ground Truth', 'EKF Estimate');
grid on;

function [X_Est, P_Est, GT] = myEKF(out)
% myEKF takes the logged struct "out" and outputs:
%   X_Est  : State estimate [x, y, psi] for each time step (N x 3)
%   P_Est  : State covariance (3 x 3 x N), where the state is [x; y; psi]
%   GT     : Ground truth positions (N x 3), typically [X, Y, Z]
%
% This function combines a 6-state EKF for position estimation with an EKF
% block for yaw estimation.

%% --------------------------
%% Data Extraction & Preprocessing
%% --------------------------
% Extract sensor data for position estimation
accelData = permute(out.Sensor_ACCEL.signals.values, [3 2 1]);

timeVec   = out.Sensor_Time.time;
accelXY   = accelData(:,1:2);
validInd  = ~any(isnan(accelXY),2);
accelXY   = accelXY(validInd,:);
timeVec   = timeVec(validInd);

% Extract ground truth for position (assume GT has at least 3 columns: X,Y,Z)
GT_all    = out.GT_position.signals.values;
N_gt      = size(GT_all,1);
N_time    = length(timeVec);
N         = min(N_gt, N_time);
GT        = GT_all(1:N,1:3);  % Ground truth (X, Y, Z)
timeVec   = timeVec(1:N);
accelXY   = accelXY(1:N,:);

% Filter the accelerometer data
window_med   = 3;
accelXY_med  = medfilt1(accelXY, window_med);
fc           = 10;  % cutoff frequency in Hz
Fs           = 1/mean(diff(timeVec));
[b, a]       = butter(4, fc/(Fs/2)); 
accelXY_filt = filtfilt(b, a, accelXY_med);

% Extract and interpolate ToF readings for position estimation
tof1_raw = out.Sensor_ToF1.signals.values(:,1);  % forward sensor
tof2_raw = out.Sensor_ToF2.signals.values(:,1);    % left sensor
tof3_raw = out.Sensor_ToF3.signals.values(:,1);    % right sensor

if isfield(out.Sensor_ToF1,'time')
    time_tof1 = out.Sensor_ToF1.time;
else
    time_tof1 = timeVec;
end
if isfield(out.Sensor_ToF2,'time')
    time_tof2 = out.Sensor_ToF2.time;
else
    time_tof2 = timeVec;
end
if isfield(out.Sensor_ToF3,'time')
    time_tof3 = out.Sensor_ToF3.time;
else
    time_tof3 = timeVec;
end

tof1 = interp1(time_tof1, tof1_raw, timeVec, 'linear', 'extrap');
tof2 = interp1(time_tof2, tof2_raw, timeVec, 'linear', 'extrap');  
tof3 = interp1(time_tof3, tof3_raw, timeVec, 'linear', 'extrap');  

%% --------------------------
%% EKF for Position (6-State Model)
%% --------------------------
% State vector: x = [x; y; vx; vy; ax; ay]
x_est = zeros(6,1);
P_est_pos = diag([0.1, 0.1, 0.5, 0.5, 0.2, 0.2]);  % initial covariance

init_samples = 10;
std_accel_x = std(accelXY_filt(1:init_samples,1));
std_accel_y = std(accelXY_filt(1:init_samples,2));

% Process noise covariance matrix Q (tune these as needed)
Q = diag([0.05, 0.005, 0.05, 0.05, std_accel_x^2, std_accel_y]);

% Measurement noise covariance matrix R (5 measurements: 3 ToF, 2 accel)
std_tof1 = std(tof1(1:init_samples));
std_tof2 = std(tof2(1:init_samples));
std_tof3 = std(tof3(1:init_samples));
R = diag([std_tof1, std_tof2, std_tof3, std_accel_x^2, std_accel_y]);

% Box geometry (used in measurement model)
D_box = 2.4;  % expected full box length
expected_tof1 = 2.4;   % forward sensor expected
expected_tof2 = 2.4;   % left sensor expected
expected_tof3 = 0;     % right sensor expected

% Compute initial ToF biases (using first few samples)
actual_tof1 = mean(tof1(1:init_samples));
actual_tof2 = mean(tof2(1:init_samples));
actual_tof3 = mean(tof3(1:init_samples));
bias_tof1 = actual_tof1 - expected_tof1;
bias_tof2 = actual_tof2 - expected_tof2;
bias_tof3 = actual_tof3 - expected_tof3;

% Preallocate storage for state and covariance history for the position filter
x_est_hist = zeros(6, N);
P_est_hist = zeros(6, 6, N);
x_est_hist(:,1) = x_est;
P_est_hist(:,:,1) = P_est_pos;

% Run the EKF loop for position
for k = 1:N-1
    dt = timeVec(k+1) - timeVec(k);
    
    % State transition matrix F (constant acceleration model)
    F = [1, 0, dt,      0, 0.5*dt^2,      0;
         0, 1,  0,     dt,      0, 0.5*dt^2;
         0, 0,  1,      0,      dt,           0;
         0, 0,  0,      1,       0,          dt;
         0, 0,  0,      0,       1,           0;
         0, 0,  0,      0,       0,           1];
     
    % Prediction step
    x_pred = F * x_est;
    P_pred = F * P_est_pos * F' + Q;
    
    % Measurements:
    % (a) ToF measurements (with bias correction)
    z_tof = [tof1(k+1) - bias_tof1;
             tof2(k+1) - bias_tof2;
             tof3(k+1) - bias_tof3];
    % (b) Accelerometer measurements (filtered accel, current sample)
    z_accel = accelXY_filt(k,:)';
    z = [z_tof; z_accel];
    
    % Measurement model (maps state to expected measurements)
    h = [D_box - x_pred(1);
         D_box - x_pred(2);
         x_pred(2);
         x_pred(5);
         x_pred(6)];
     
    % Jacobian H of the measurement function with respect to the state:
    H = [ -1,    0,  0,  0,  0, 0;
           0,   -1,  0,  0,  0, 0;
           0,    1,  0,  0,  0, 0;
           0,    0,  0,  0,  1, 0;
           0,    0,  0,  0,  0, 1];
       
    % Innovation and update step
    y_innov = z - h;
    S = H * P_pred * H' + R;
    K = P_pred * H' / S;
    
    x_est = x_pred + K * y_innov;
    P_est_pos = (eye(6) - K * H) * P_pred;
    
    % Store history
    x_est_hist(:,k+1) = x_est;
    P_est_hist(:,:,k+1) = P_est_pos;
end

%% --------------------------
%% EKF for Yaw Estimation
%% --------------------------
% Here we use the provided ekfBlock code.
% The function below (ekfBlock) has been modified to also return the covariance
% history for the yaw estimation (P_yaw_hist).

[~, ~, psi_all, P_yaw_hist] = ekfBlock(out);

% Make sure the yaw estimation has the same number of time steps
N_yaw = length(psi_all);
N_use = min(N, N_yaw);
psi_all  = psi_all(1:N_use);
P_yaw_hist = P_yaw_hist(:,:,1:N_use);

%% --------------------------
%% Combine Position and Yaw Estimates
%% --------------------------
% For each time step, we form a combined state [x; y; psi].
% We extract x and y from the position EKF state (first two elements).
X_Est = [x_est_hist(1,1:N_use)', x_est_hist(2,1:N_use)', psi_all];

% Form the combined covariance as block-diagonal:
%   P_xy (2x2 from the position EKF) and the variance of psi (1x1 from yaw EKF)
P_Est = zeros(3, 3, N_use);
for k = 1:N_use
    P_xy = P_est_hist(1:2,1:2,k);
    P_psi = P_yaw_hist(3,3,k);  % variance of psi from yaw filter
    P_Est(:,:,k) = [P_xy, zeros(2,1); zeros(1,2), P_psi];
end

end

%% ---------------------------------------
%% Yaw Estimation Function: ekfBlock
%% ---------------------------------------
function [phi_all, theta_all, psi_all, P_yaw_hist] = ekfBlock(out)
% ekfBlock implements an EKF for attitude estimation and returns the yaw (psi)
% and its covariance history.
%
% Inputs:
%   out - logged data struct containing Sensor_ACCEL, Sensor_GYRO, Sensor_MAG,
%         Sensor_Time, and GT_rotation.
%
% Outputs:
%   phi_all, theta_all, psi_all : estimated roll, pitch, yaw (Nx1 vectors)
%   P_yaw_hist : covariance history of the 3-state filter (3x3xN array)

acc = permute(out.Sensor_ACCEL.signals.values, [3 2 1]);
gyro = permute(out.Sensor_GYRO.signals.values, [3 2 1]);
magn = permute(out.Sensor_MAG.signals.values, [3 2 1]);
time = out.Sensor_Time.time;
N = size(acc, 1);

phi_all   = zeros(N, 1);
theta_all = zeros(N, 1);
psi_all   = zeros(N, 1);
P_yaw_hist = zeros(3,3,N);

% Compute sensor biases and standard deviations from the first few samples
acc_std  = std(acc(1:10,:));
gyro_std = std(gyro(1:10,:));
magn_std = std(magn(1:10,:));

acc_bias  = mean(acc(1:10,:));
gyro_bias = mean(gyro(1:10,:));
magn_bias = mean(magn(1:10,:));

% Initialize state and covariance for attitude
x = zeros(3,1);  % [phi; theta; psi]
P = eye(3)*0.1;
P(3,3) = (180/pi)^2;  % give a larger initial uncertainty to yaw

dt = mean(diff(time));
g = 9.81;
M_inertial = [19437.4e-9; 181.2e-9; 45090.4e-9];
Q = diag(gyro_std);   % process noise
R = diag([acc_std, magn_std]);  % measurement noise

for k = 1:N
    % Subtract biases from measurements
    accX = acc(k,1) - acc_bias(1);
    accY = acc(k,2) - acc_bias(2);
    accZ = acc(k,3) - acc_bias(3);

    gyroX = gyro(k,1) - gyro_bias(1);
    gyroY = gyro(k,2) - gyro_bias(2);
    gyroZ = gyro(k,3) - gyro_bias(3);

    magX = magn(k,1) - magn_bias(1);
    magY = magn(k,2) - magn_bias(2);
    magZ = magn(k,3) - magn_bias(3);

    phi_k   = x(1);
    theta_k = x(2);
    psi_k   = x(3);

    % Angular rates
    p = gyroX;
    q = gyroY;
    r = gyroZ;

    % Continuous-time state derivatives
    phi_dot   = p + q*sin(phi_k)*tan(theta_k) + r*cos(phi_k)*tan(theta_k);
    theta_dot = q*cos(phi_k) - r*sin(phi_k);
    psi_dot   = (q*sin(phi_k) + r*cos(phi_k)) / cos(theta_k);

    % Predict step (Euler integration)
    x_pred = x + dt * [phi_dot; theta_dot; psi_dot];

    % Compute Jacobian of the motion model (F_ct)
    F_ct = zeros(3);
    F_ct(1,1) = q*cos(phi_k)*tan(theta_k) - r*sin(phi_k)*tan(theta_k);
    sec2_th = 1/cos(theta_k)^2;
    F_ct(1,2) = (q*sin(phi_k) + r*cos(phi_k)) * sec2_th;
    F_ct(2,1) = -q*sin(phi_k) - r*cos(phi_k);
    one_over_costh = 1 / cos(theta_k);
    F_ct(3,1) = one_over_costh * (q*cos(phi_k) - r*sin(phi_k));
    F_ct(3,2) = (q*sin(phi_k) + r*cos(phi_k)) * (sin(theta_k)/(cos(theta_k)^2));

    F = eye(3) + dt * F_ct;
    P_pred = F * P * F' + Q;

    % Measurement prediction: using gravity and magnetic field models
    g_inertial = [0; 0; g];
    Rib = rotX(x_pred(1)) * rotY(x_pred(2)) * rotZ(x_pred(3));
    acc_pred = Rib * g_inertial;
    mag_pred = Rib * M_inertial;
    z_pred = [acc_pred; mag_pred];

    % Actual measurement vector
    z = [accX; accY; accZ; magX; magY; magZ];

    % Numerical Jacobian for measurement function
    H = zeros(6,3);
    eps_val = 1e-6;
    for i = 1:3
        x_shift = x_pred;
        x_shift(i) = x_shift(i) + eps_val;
        R_shift = rotX(x_shift(1))*rotY(x_shift(2))*rotZ(x_shift(3));
        z_shift = [R_shift*g_inertial; R_shift*M_inertial];
        H(:,i) = (z_shift - z_pred) / eps_val;
    end

    y = z - z_pred;
    S = H * P_pred * H' + R;
    K = P_pred * H' / S;

    x = x_pred + K*y;
    P = (eye(3) - K*H) * P_pred;

    % Store the state and covariance history
    phi_all(k)   = x(1);
    theta_all(k) = x(2);
    psi_all(k)   = x(3);
    P_yaw_hist(:,:,k) = P;
end
end

%% Rotation helper functions
function Rx = rotX(a)
    Rx = [1, 0, 0;
          0, cos(a), -sin(a);
          0, sin(a), cos(a)];
end

function Ry = rotY(b)
    Ry = [cos(b), 0, sin(b);
          0, 1, 0;
          -sin(b), 0, cos(b)];
end

function Rz = rotZ(c)
    Rz = [cos(c), -sin(c), 0;
          sin(c), cos(c), 0;
          0, 0, 1];
end
