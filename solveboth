%% 2D Position Estimation via EKF (Using ToF1 and ToF2, with IMU Acceleration)
% Parameters
dt = 0.01;          % Time step (100 Hz)
D_box = 2.4;        % Box dimension in meters

%% Data Extraction & Preprocessing

% Time vector (assumed to be in out.Sensor_Time.time)
timeVec = out.Sensor_Time.time;
N = length(timeVec);

% --- Accelerometer Data ---
% The accelerometer data is stored as 1×3×N; convert to [N x 3]
accData = squeeze(out.Sensor_ACCEL.signals.values);  % becomes [3 x N]
accData = accData';  % Now [N x 3]: columns: [ax, ay, az]
% Sensor frame: x = lateral, y = forward, z = upward.
% Optionally remove bias from channels (if needed)
bias_forward = mean(accData(:,2));
bias_lateral = mean(accData(:,1));
accData(:,2) = accData(:,2) - bias_forward;
accData(:,1) = accData(:,1) - bias_lateral;

% Apply low-pass Butterworth filter to accelerometer data.
Fs = 1 / mean(diff(timeVec));
fc = 10;  % cutoff frequency in Hz
[b, a] = butter(4, fc/(Fs/2));
accData_filt = filtfilt(b, a, accData);

% --- ToF Sensor Data ---
% Extract the first column for each sensor (distance in meters)
tof1_raw = out.Sensor_ToF1.signals.values(:,1);  % forward sensor
tof2_raw = out.Sensor_ToF2.signals.values(:,1);    % left sensor

% Replace zeros with NaN (if zeros indicate invalid readings) and fill.
tof1_raw(tof1_raw == 0) = NaN;
tof2_raw(tof2_raw == 0) = NaN;
tof1 = fillmissing(tof1_raw, 'linear');
tof2 = fillmissing(tof2_raw, 'linear');

% Apply low-pass filtering to ToF data.
tof1_filt = filtfilt(b, a, tof1);
tof2_filt = filtfilt(b, a, tof2);

%% EKF Initialization for 2D Position
% State vector: x = [x; y; vx; vy]
% Measurement model: 
%   z1 = D_box - x  and  z2 = D_box - y.
% Initialize state using the first available ToF measurements.
x_init = [D_box - tof1_filt(1);   % forward position
          D_box - tof2_filt(1);   % lateral position
          0; 0];                 % initial velocities set to zero
x_est = x_init;
P_est = diag([0.1, 0.1, 0.5, 0.5]);  % initial covariance

%% Noise Covariance Calculation
% Process noise: based on the filtered accelerometer data.
sigma_acc_forward = std(accData_filt(:,2));  % forward acceleration noise
sigma_acc_lateral = std(accData_filt(:,1));    % lateral acceleration noise
Q = diag([0.05, 0.05, sigma_acc_forward^2, sigma_acc_lateral^2]);

% Measurement noise: based on the filtered ToF data.
sigma_tof_forward = std(tof1_filt);
sigma_tof_left = std(tof2_filt);
R = diag([sigma_tof_forward^2, sigma_tof_left^2]);

%% Preallocate state history
x_est_hist = zeros(4, N);
x_est_hist(:,1) = x_est;

%% EKF Loop for 2D Position Estimation
for k = 1:N-1
    dt = timeVec(k+1) - timeVec(k);
    
    % -------------------------------
    % Prediction Step:
    % Use accelerometer measurements as control inputs.
    % Mapping:
    %   forward acceleration, u_f = accData_filt(k,2)
    %   lateral acceleration, u_lat = accData_filt(k,1)
    u = [accData_filt(k,2); accData_filt(k,1)];  % [u_f; u_lat] in m/s^2
    
    % Constant-acceleration state transition:
    % x_{k+1} = x_k + dt*v + 0.5*dt^2*u,   v_{k+1} = v_k + dt*u
    F = [1, 0, dt, 0;
         0, 1, 0, dt;
         0, 0, 1, 0;
         0, 0, 0, 1];
    B = [0.5*dt^2, 0;
         0, 0.5*dt^2;
         dt, 0;
         0, dt];
    x_pred = F * x_est + B * u;
    P_pred = F * P_est * F' + Q;
    
    % -------------------------------
    % Measurement Step:
    % Measurement model: h(x) = [D_box - x; D_box - y]
    h = [D_box - x_pred(1);
         D_box - x_pred(2)];
    
    % Measurement vector from filtered ToF data (at sample k+1)
    z = [tof1_filt(k+1); tof2_filt(k+1)];
    
    % Measurement Jacobian H (2x4): partial derivatives with respect to x and y.
    H = [-1, 0, 0, 0;
          0,-1, 0, 0];
    
    % EKF Update:
    y_innov = z - h;
    S = H * P_pred * H' + R;
    K = P_pred * H' / S;
    x_est = x_pred + K * y_innov;
    P_est = (eye(4) - K * H) * P_pred;
    
    x_est_hist(:,k+1) = x_est;
end

%% Apply a Moving Average Filter to the Forward Position
% We'll smooth the forward position (first row of x_est_hist) using a moving average.
windowSize = 70;  % adjust window size as needed
x_forward_smoothed = movmean(x_est_hist(1,:), windowSize);

% Replace the forward position in our state history with the smoothed values.
x_est_hist_modified = x_est_hist;
x_est_hist_modified(1,:) = x_forward_smoothed;

%% RMSE Calculation and Alignment (ignoring the first sample)
% Ground truth position (assumed stored in out.GT_position.signals.values [N x 3])
GT_pos = out.GT_position.signals.values;  % [N x 3]: [x, y, z]
GT_xy = GT_pos(:,1:2);

% Ignore the initial state (first column) when aligning.
x_est_no0 = x_est_hist_modified(:,2:end);
time_no0 = timeVec(2:end);

% Align the estimated trajectory to the ground truth starting from the second sample.
shift = GT_xy(2,:) - x_est_no0(1:2,1)';
x_est_aligned = x_est_no0;
x_est_aligned(1:2,:) = x_est_no0(1:2,:) + repmat(shift', 1, size(x_est_no0,2));

% Compute RMSE between aligned estimated positions and ground truth (ignoring the first sample)
error_vector = x_est_aligned(1:2,:)' - GT_xy(2:end,:);
rmse_xy = sqrt(mean(sum(error_vector.^2,2)));
fprintf('Aligned RMSE (xy): %.6f m\n', rmse_xy);

%% Plotting Figures

% 1. Ground Truth vs. Original EKF Estimated 2D Trajectory (ignoring the initial state)
figure('Name','2D Position Estimation - Original');
plot(GT_xy(2:end,1), GT_xy(2:end,2), 'k-', 'LineWidth',1.5); hold on;
plot(x_est_hist(1,2:end), x_est_hist(2,2:end), 'r--', 'LineWidth',1.5);
xlabel('Forward Position [m]');
ylabel('Lateral Position [m]');
title('Ground Truth vs. Original EKF Estimated 2D Trajectory');
legend('Ground Truth','EKF Estimate');
grid on;
axis equal;

% 2. Aligned 2D Trajectory (starting positions matched using moving average for forward position)
figure('Name','Aligned 2D Trajectory');
plot(GT_xy(2:end,1), GT_xy(2:end,2), 'k-', 'LineWidth',1.5); hold on;
plot(x_est_aligned(1,:), x_est_aligned(2,:), 'r--', 'LineWidth',1.5);
xlabel('Forward Position [m]');
ylabel('Lateral Position [m]');
title('Aligned EKF Estimated 2D Trajectory');
legend('Ground Truth','Aligned EKF Estimate');
grid on;
axis equal;

% 3. Estimated Position vs. Time (ignoring the initial state)
figure('Name','Estimated Position vs. Time');
subplot(2,1,1);
plot(time_no0, x_est_hist(1,2:end), 'r-', 'LineWidth',1.2);
xlabel('Time [s]'); ylabel('Forward Position [m]');
title('Original EKF Estimated Forward Position');
grid on;
subplot(2,1,2);
plot(time_no0, x_est_hist(2,2:end), 'b-', 'LineWidth',1.2);
xlabel('Time [s]'); ylabel('Lateral Position [m]');
title('Original EKF Estimated Lateral Position');
grid on;

% 4. Plot the Smoothed Forward Position vs. Time
figure('Name','Smoothed Forward Position vs. Time');
plot(timeVec, x_forward_smoothed, 'm-', 'LineWidth',1.5);
xlabel('Time [s]');
ylabel('Forward Position [m]');
title('Smoothed Forward Position (Moving Average Filter)');
grid on;
