[X_Est, P_Est, GT] = myEKF(out);


est_xy = X_Est(:, 1:2);
gt_xy  = GT(:, 1:2);

% Align the estimated trajectory with the ground truth by computing a shift based on the first sample
shift = gt_xy(1,:) - est_xy(1,:);
est_xy_aligned = est_xy + repmat(shift, size(est_xy,1), 1);

% Compute the error vector for each time step and then the RMSE
error = est_xy_aligned - gt_xy;

%error = GT(:,1:2) - X_Est(:,1:2);
rmse = sqrt(mean(sum(error.^2,2)));
fprintf('RMSE (XY) = %.4f m\n', rmse);

% Compute yaw RMSE
yaw_error = wrapToPi(X_Est(:,3) - GT(:,3)); % Ensure errors are within [-pi, pi]
yaw_rmse = sqrt(mean(yaw_error.^2));
fprintf('Yaw RMSE = %.6f rad (%.4f degrees)\n', yaw_rmse, rad2deg(yaw_rmse));

figure;
plot(GT(:,1), GT(:,2), 'k-', 'LineWidth', 1.5);  % Ground truth (black solid line)
hold on;
plot(X_Est(:,1), X_Est(:,2), 'r--', 'LineWidth', 1.5);  % Estimated trajectory (red dashed line)
xlabel('X Position [m]');
ylabel('Y Position [m]');
title('2D Trajectory: Ground Truth vs. EKF Estimate');
legend('Ground Truth','EKF Estimate');
grid on;
axis equal;

figure;
plot(GT(:,3), 'k-', 'LineWidth', 1.5); % Ground truth yaw
hold on;
plot(X_Est(:,3), 'r--', 'LineWidth', 1.5); % Estimated yaw
xlabel('Time Step');
ylabel('Yaw [rad]');
title('Yaw: Ground Truth vs. EKF Estimate');
legend('Ground Truth', 'EKF Estimate');
grid on;

function [X_Est, P_Est, GT] = myEKF(out)
% myEKF takes the logged struct "out" and outputs:
%   X_Est  : State estimate [x, y, psi] for each time step (N x 3)
%   P_Est  : State covariance (3 x 3 x N), where the state is [x; y; psi]
%   GT     : Ground truth positions (N x 3), typically [X, Y, Z]
%
% This function combines a 6-state EKF for position estimation with an EKF
% block for yaw estimation.

%% --------------------------
%% Data Extraction & Preprocessing
%% --------------------------
% Extract sensor data for position estimation
accelData = permute(out.Sensor_ACCEL.signals.values, [3 2 1]);

timeVec   = out.Sensor_Time.time;
accelXY   = accelData(:,1:2);
validInd  = ~any(isnan(accelXY),2);
accelXY   = accelXY(validInd,:);
timeVec   = timeVec(validInd);

% Extract ground truth for position (assume GT has at least 3 columns: X,Y,Z)
GT_all    = out.GT_position.signals.values;
N_gt      = size(GT_all,1);
N_time    = length(timeVec);
N         = min(N_gt, N_time);
GT        = GT_all(1:N,1:3);  % Ground truth (X, Y, Z)
timeVec   = timeVec(1:N);
accelXY   = accelXY(1:N,:);

% Filter the accelerometer data
window_med   = 3;
accelXY_med  = medfilt1(accelXY, window_med);
fc           = 10;  % cutoff frequency in Hz
Fs           = 1/mean(diff(timeVec));
[b, a]       = butter(4, fc/(Fs/2)); 
accelXY_filt = filtfilt(b, a, accelXY_med);

% Extract and interpolate ToF readings for position estimation
tof1_raw = out.Sensor_ToF1.signals.values(:,1);  % forward sensor
tof2_raw = out.Sensor_ToF2.signals.values(:,1);    % left sensor
tof3_raw = out.Sensor_ToF3.signals.values(:,1);    % right sensor

if isfield(out.Sensor_ToF1,'time')
    time_tof1 = out.Sensor_ToF1.time;
else
    time_tof1 = timeVec;
end
if isfield(out.Sensor_ToF2,'time')
    time_tof2 = out.Sensor_ToF2.time;
else
    time_tof2 = timeVec;
end
if isfield(out.Sensor_ToF3,'time')
    time_tof3 = out.Sensor_ToF3.time;
else
    time_tof3 = timeVec;
end

tof1 = interp1(time_tof1, tof1_raw, timeVec, 'linear', 'extrap');
tof2 = interp1(time_tof2, tof2_raw, timeVec, 'linear', 'extrap');  
tof3 = interp1(time_tof3, tof3_raw, timeVec, 'linear', 'extrap');  

%% --------------------------
%% EKF for Position (6-State Model)
%% --------------------------
% State vector: x = [x; y; vx; vy; ax; ay]
x_est = zeros(6,1);
P_est_pos = diag([0.1, 0.1, 0.5, 0.5, 0.2, 0.2]);  % initial covariance

init_samples = 10;
std_accel_x = std(accelXY_filt(1:init_samples,1));
std_accel_y = std(accelXY_filt(1:init_samples,2));

% Process noise covariance matrix Q (tune these as needed)
Q = diag([0.05, 0.005, 0.05, 0.05, std_accel_x^2, std_accel_y]);

% Measurement noise covariance matrix R (5 measurements: 3 ToF, 2 accel)
std_tof1 = std(tof1(1:init_samples));
std_tof2 = std(tof2(1:init_samples));
std_tof3 = std(tof3(1:init_samples));
R = diag([std_tof1, std_tof2, std_tof3, std_accel_x^2, std_accel_y]);

% Box geometry (used in measurement model)
D_box = 2.4;  % expected full box length
expected_tof1 = 2.4;   % forward sensor expected
expected_tof2 = 2.4;   % left sensor expected
expected_tof3 = 0;     % right sensor expected

% Compute initial ToF biases (using first few samples)
actual_tof1 = mean(tof1(1:init_samples));
actual_tof2 = mean(tof2(1:init_samples));
actual_tof3 = mean(tof3(1:init_samples));
bias_tof1 = actual_tof1 - expected_tof1;
bias_tof2 = actual_tof2 - expected_tof2;
bias_tof3 = actual_tof3 - expected_tof3;

% Preallocate storage for state and covariance history for the position filter
x_est_hist = zeros(6, N);
P_est_hist = zeros(6, 6, N);
x_est_hist(:,1) = x_est;
P_est_hist(:,:,1) = P_est_pos;

% Run the EKF loop for position
for k = 1:N-1
    %dt = timeVec(k+1) - timeVec(k);
    dt = 0.02; %200 Hz
    % State transition matrix F (constant acceleration model)
    F = [1, 0, dt,      0, 0.5*dt^2,      0;
         0, 1,  0,     dt,      0, 0.5*dt^2;
         0, 0,  1,      0,      dt,           0;
         0, 0,  0,      1,       0,          dt;
         0, 0,  0,      0,       1,           0;
         0, 0,  0,      0,       0,           1];
     
    % Prediction step
    x_pred = F * x_est;
    P_pred = F * P_est_pos * F' + Q;
    
    % Measurements:
    % (a) ToF measurements (with bias correction)
    z_tof = [tof1(k+1) - bias_tof1;
             tof2(k+1) - bias_tof2;
             tof3(k+1) - bias_tof3];
    % (b) Accelerometer measurements (filtered accel, current sample)
    z_accel = accelXY_filt(k,:)';
    z = [z_tof; z_accel];
    
    % Measurement model (maps state to expected measurements)
    h = [D_box - x_pred(1);
         D_box - x_pred(2);
         x_pred(2);
         x_pred(5);
         x_pred(6)];
     
    % Jacobian H of the measurement function with respect to the state:
    H = [ -1,    0,  0,  0,  0, 0;
           0,   -1,  0,  0,  0, 0;
           0,    1,  0,  0,  0, 0;
           0,    0,  0,  0,  1, 0;
           0,    0,  0,  0,  0, 1];
       
    % Innovation and update step
    y_innov = z - h;
    S = H * P_pred * H' + R;
    K = P_pred * H' / S;
    
    x_est = x_pred + K * y_innov;
    P_est_pos = (eye(6) - K * H) * P_pred;
    
    % Store history
    x_est_hist(:,k+1) = x_est;
    P_est_hist(:,:,k+1) = P_est_pos;
end

%% --------------------------
%% EKF for Yaw Estimation
%% --------------------------
% Here we use the provided ekfBlock code.
% The function below (ekfBlock) has been modified to also return the covariance
% history for the yaw estimation (P_yaw_hist).

[~, ~, psi_all, P_yaw_hist] = ekfBlock(out);

% Make sure the yaw estimation has the same number of time steps
N_yaw = length(psi_all);
N_use = min(N, N_yaw);
psi_all  = psi_all(1:N_use);
P_yaw_hist = P_yaw_hist(:,:,1:N_use);

%% --------------------------
%% Combine Position and Yaw Estimates
%% --------------------------
% For each time step, we form a combined state [x; y; psi].
% We extract x and y from the position EKF state (first two elements).
X_Est = [x_est_hist(1,1:N_use)', x_est_hist(2,1:N_use)', psi_all];

% Form the combined covariance as block-diagonal:
%   P_xy (2x2 from the position EKF) and the variance of psi (1x1 from yaw EKF)
P_Est = zeros(3, 3, N_use);
for k = 1:N_use
    P_xy = P_est_hist(1:2,1:2,k);
    P_psi = P_yaw_hist(3,3,k);  % variance of psi from yaw filter
    P_Est(:,:,k) = [P_xy, zeros(2,1); zeros(1,2), P_psi];
end

end

%% ---------------------------------------
%% Yaw Estimation Function: ekfBlock
%% ---------------------------------------
function [phi_all, theta_all, psi_est, P_yaw_hist] = ekfBlock(out)
% ekfBlock implements an EKF for attitude estimation using a compass
% method to compute yaw (ψ) from accelerometer, gyroscope, and magnetometer
% measurements. It returns:
%
%   phi_all, theta_all, psi_est : estimated roll, pitch, and corrected yaw (Nx1 vectors)
%   P_yaw_hist : covariance history of the yaw filter (3x3xN array)
%
% This version uses:
%  - Compass yaw computation (ψₘ) from tilt-compensated magnetometer data.
%  - Gyro integration (ψ_g) to form a preliminary yaw.
%  - A Kalman filter to estimate the gyro yaw error δψ.
%
% The corrected yaw is: ψ_est = ψ_g - δψ.

%% ------------------ Data Extraction and Preprocessing ------------------
timeVec = out.Sensor_Time.time;   % [N x 1]
N = length(timeVec);

% Extract Gyro Data (assume data arranged as [N x 3])
gyroData = permute(out.Sensor_GYRO.signals.values, [3, 2, 1]);
omega_z = gyroData(:,3);  % use z-axis angular velocity [rad/s]

% Extract Accelerometer and Magnetometer Data ([N x 3])
accelData = permute(out.Sensor_ACCEL.signals.values, [3, 2, 1]);
magData   = permute(out.Sensor_MAG.signals.values, [3, 2, 1]);

% Smoothing using moving average (window size can be tuned)
windowSize = 100;
accelData_smooth = movmean(accelData, windowSize);
magData_smooth   = movmean(magData, windowSize);

% Remove biases (use your calibration constants)
accelBias = [10.0026, 0.0277, -0.3965];  % in m/s^2
magBias   = [0, 0, 0.0001];              % in uT
accelData_corr = accelData_smooth - repmat(accelBias, N, 1);
magData_corr   = magData_smooth - repmat(magBias, N, 1);

%% ------------------ Compute Compass Yaw (ψₘ) ------------------
yaw_m = zeros(N,1);
for i = 1:N
    a = accelData_corr(i,:);  % [ax, ay, az]
    m = magData_corr(i,:);    % [mx, my, mz]
    
    % Compute roll and pitch from accelerometer.
    % Assuming sensor axes: x = lateral, y = forward, z = upward.
    roll_i  = atan2(-a(2), -a(3));
    pitch_i = atan2(a(1), sqrt(a(2)^2 + a(3)^2));
    
    % Tilt-compensate the magnetometer:
    mag_x_comp = m(1)*cos(pitch_i) - m(3)*sin(pitch_i);
    mag_y_comp = m(1)*sin(roll_i)*sin(pitch_i) + m(2)*cos(roll_i) + m(3)*sin(roll_i)*cos(pitch_i);
    
    yaw_m(i) = atan2(mag_y_comp, mag_x_comp);
end
yaw_m = wrapToPi(yaw_m);

%% ------------------ Gyro Integration to Obtain ψ_g ------------------
psi_g = zeros(N,1);
psi_g(1) = yaw_m(1);  % initialize gyro yaw to compass yaw
for k = 1:N-1
    dt = timeVec(k+1) - timeVec(k);
    psi_g(k+1) = psi_g(k) + omega_z(k) * dt;
end
psi_g = wrapToPi(psi_g);

%% ------------------ Kalman Filter for Gyro Error Estimation ------------------
% We want to estimate the gyro yaw error δψ so that:
%    ψ_true = ψ_g - δψ.
% We'll use a state vector: x = [δψ; δk; b]
% where δψ is the accumulated gyro yaw error, δk is a scale factor error,
% and b is a bias error.

% Initialization:
x_est = zeros(3,1);          % initial state: assume zero error.
P_est = eye(3) * 0.001;        % small initial covariance.
% Process noise standard deviations (tune these as needed)
sigma_psi = 0.001;
sigma_k   = 0.0001;
sigma_b   = 0.0001;
% Measurement noise variance for the yaw measurement (tune this as needed)
R_k = (0.05)^2;

% Preallocate storage for the state estimates and corrected yaw.
x_est_hist = zeros(3, N);
P_yaw_hist = zeros(3,3,N);
x_est_hist(:,1) = x_est;
psi_est = zeros(N,1);
psi_est(1) = wrapToPi( psi_g(1) - x_est(1) );  % Corrected yaw = ψ_g - δψ

for k = 1:N-1
    dt = timeVec(k+1) - timeVec(k);
    
    % State transition matrix F_k:
    F = [1, omega_z(k)*dt, dt;
         0, 1, 0;
         0, 0, 1];
    
    % Process noise covariance Q_k:
    Q_k = diag([sigma_psi^2, sigma_k^2, sigma_b^2]) * dt;
    
    % Prediction step:
    x_pred = F * x_est;
    P_pred = F * P_est * F' + Q_k;
    
    % Measurement: difference between gyro-integrated yaw and compass yaw:
    z_meas = psi_g(k+1) - yaw_m(k+1);
    
    % Measurement model: H = [1, 0, 0]
    H = [1, 0, 0];
    
    % Innovation and its covariance:
    y_innov = z_meas - H * x_pred;
    S = H * P_pred * H' + R_k;
    
    % Kalman gain:
    K = P_pred * H' / S;
    
    % Update:
    x_est = x_pred + K * y_innov;
    P_est = (eye(3) - K * H) * P_pred;
    
    % Store the state and covariance history, and compute corrected yaw:
    x_est_hist(:, k+1) = x_est;
    P_yaw_hist(:,:, k+1) = P_est;
    psi_est(k+1) = wrapToPi( psi_g(k+1) - x_est(1) );
end

%% ------------------ Compute Roll and Pitch ------------------
% Here we compute roll (ϕ) and pitch (θ) from the accelerometer for each time step.
phi_all = zeros(N,1);
theta_all = zeros(N,1);
for i = 1:N
    a = accelData_corr(i,:);
    phi_all(i) = atan2(-a(2), -a(3));
    theta_all(i) = atan2(a(1), sqrt(a(2)^2 + a(3)^2));
end

end
